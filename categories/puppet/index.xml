<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>puppet on Logical thoughts exposed</title><link>/categories/puppet/</link><description>Recent content in puppet on Logical thoughts exposed</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Feb 2022 09:52:43 -0800</lastBuildDate><atom:link href="/categories/puppet/index.xml" rel="self" type="application/rss+xml"/><item><title>Trunk based development for your control repo</title><link>/blog/2022-02-22-trunk-based-development-for-your-control-repo/</link><pubDate>Tue, 22 Feb 2022 09:52:43 -0800</pubDate><guid>/blog/2022-02-22-trunk-based-development-for-your-control-repo/</guid><description>Since the inception of R10k there has been a recipe of 1 part branch to 1 part puppet environment for puppet control repos. This concoction has allowed us to create one-off ephemeral test environments that we all love simply by creating a new git branch.
Since R10k was first introduced we have always used the promotion workflow to usher features into environments. While this workflow served us well there is a different kind of code setup that is now possible with R10k that improves upon what we already know.</description></item><item><title>Decouple Your Control Repo Branches</title><link>/blog/2021-04-14-decouple-your-control-repo-branches/</link><pubDate>Wed, 14 Apr 2021 21:52:43 -0800</pubDate><guid>/blog/2021-04-14-decouple-your-control-repo-branches/</guid><description>Coming soon!
In the meantime, read up on these first.
Single branch strategy
Environment strategy
R10k YAML environment docs )</description></item><item><title>No Code Is the Best Code</title><link>/blog/2021-02-15-no-code-is-the-best-code/</link><pubDate>Mon, 15 Feb 2021 11:59:10 -0700</pubDate><guid>/blog/2021-02-15-no-code-is-the-best-code/</guid><description>I heard this quote a while back and I keep repeating for all to hear.
The theory is quite simple:
Less is more Reduces complexity Improves performance Reduces loading times No tests needed for the deleted code No documentation needed for the deleted code Readability is enhanced Reduce. Resuse. Delete.
&amp;ldquo;No code is the best code.&amp;rdquo;</description></item><item><title>Getting real with the RAL</title><link>/blog/2021-02-14-getting-real-with-the-ral/</link><pubDate>Sun, 14 Feb 2021 11:15:48 -0700</pubDate><guid>/blog/2021-02-14-getting-real-with-the-ral/</guid><description>A client of mine recently had a need to discover that state of a particular package from inside a fact. Ironically, someone else in the puppet-community had a similar need and was asking questions about this. So I thought it would be a good idea to blog about how to query the system agnostically without shelling out in a fact.
The original solution for many of us was to create a fact like the following:</description></item><item><title>Adding Puppet Debugger and other gems when using PDK</title><link>/blog/2019-04-02-adding-puppet-debugger-and-other-gems-when-using-pdk/</link><pubDate>Tue, 02 Apr 2019 10:05:51 -0800</pubDate><guid>/blog/2019-04-02-adding-puppet-debugger-and-other-gems-when-using-pdk/</guid><description>The Puppet Development Kit (PDK) makes it really simple and efficient to work on puppet modules. If you have never used the PDK I would encourage you to try it out especially if you use windows.
The PDK wraps all the annoying tasks so that you don&amp;rsquo;t have to endure the pain of modifying Gemfiles, spec files, folder structure and other puppet related module development tasks.
But with any good wrapper code, what you gain in efficiency you do so at the cost of control and customization.</description></item><item><title>Alternative Facts</title><link>/blog/2018-09-25-alternative-facts/</link><pubDate>Tue, 25 Sep 2018 15:26:41 -0700</pubDate><guid>/blog/2018-09-25-alternative-facts/</guid><description>What does Puppet and alternative facts have in common?
No, this is not some political rant about how real facts matter. This article is about sub-planting alternative puppet facts provided by custom external FacterDB facts.
But first. What the hell are FacterDB facts? FacterDB facts are artisanal hand-made facter sets from real systems stashed into a filesystem based &amp;ldquo;database&amp;rdquo; and searchable via facts. Basically just run puppet facts and save them off into git to get an idea.</description></item><item><title>Debugging and Inspecting hiera lookups</title><link>/blog/2018-09-25-debugging-and-inspecting-hiera-lookups/</link><pubDate>Tue, 25 Sep 2018 10:21:49 -0700</pubDate><guid>/blog/2018-09-25-debugging-and-inspecting-hiera-lookups/</guid><description>Summary: In this article you will learn how to debug hiera lookups using the traditional methods and more importantly with the puppet-debugger which can cover a multitude of use cases.
Previously, debugging hiera lookups has been limited to the command line and debug logs. If you wanted to debug hiera lookups you had to use the hiera command and pass in the config file along with the scope (variables, facts) you wanted to use.</description></item><item><title>Retrospec - the task generator</title><link>/blog/2017-10-12-retrospec-the-task-generator/</link><pubDate>Thu, 12 Oct 2017 11:17:30 -0700</pubDate><guid>/blog/2017-10-12-retrospec-the-task-generator/</guid><description>Puppet introduced Bolt at Puppetconf 2017 this year and so far I like what I see. Simple, easy to use remote task execution without a huge requirement of any one language. Best of all puppet modules can start adding one off bolt tasks to help with the administrative duties of various applications. Bolt makes it really easy to get started but adds some required scaffolding to create a properly defined task, namely the metadata file.</description></item><item><title>Put some data in your module</title><link>/blog/2017-06-01-put-some-data-in-your-module/</link><pubDate>Thu, 01 Jun 2017 08:31:20 -0700</pubDate><guid>/blog/2017-06-01-put-some-data-in-your-module/</guid><description>Puppet 4.9 cemented the final touches to putting data in puppet modules with the release of hiera 5. Which by the way hiera is now part of Puppet project instead of a separate gem as with previous versions.
So now that that whole params.pp mess is over we can finally move forward and create modules with rich sets of data without resorting to the params.pp hack.
So lets get started. In order to put data in your module you need to have a few things.</description></item><item><title>Break into your puppet code</title><link>/blog/2017-04-25-break-into-your-puppet-code/</link><pubDate>Tue, 25 Apr 2017 13:15:36 -0700</pubDate><guid>/blog/2017-04-25-break-into-your-puppet-code/</guid><description>The puppet 4 language introduced a slew of new features that gives us enormous amounts of power and flexibility. So much so that puppet code can become complex and often hard to understand at a glance.
A way to combat this complexity is to write unit tests to validate the end state. However, one of the shortcomings of unit testing with rspec-puppet is that you can only test against the end state.</description></item><item><title>Benchmarking Your Puppet Code</title><link>/blog/2017-04-24-benchmarking-your-puppet-code/</link><pubDate>Mon, 24 Apr 2017 18:04:34 -0700</pubDate><guid>/blog/2017-04-24-benchmarking-your-puppet-code/</guid><description>Did you know the puppet debugger can measure how fast your puppet code runs? Starting with release 0.6.1 of the puppet-debugger you can now perform simple benchmarks against your puppet code. So if you ever wondered how fast your puppet code is or that custom puppet function you wrote now there is a way to benchmark those things.
All you need to do is enable benchmark mode, and then use the debugger as you normally do.</description></item><item><title>Testing DataTypes with the Puppet Debugger</title><link>/blog/2017-03-25-testing-datatypes-with-the-puppet-debugger/</link><pubDate>Sat, 25 Mar 2017 10:17:23 -0700</pubDate><guid>/blog/2017-03-25-testing-datatypes-with-the-puppet-debugger/</guid><description>The puppet language comes with a lot of extremely useful syntax and concepts. However, sometimes it is difficult to understand how these work or how to use them. Datatypes are found in almost every programming language so it is no surprise that puppet 4 has a similar feature for validating parameter data. If you have never used a puppet datatype before have a look here first.
The other day I was showing my client the awesome power of puppet datatypes and I was using the puppet-debugger to illustrate how datatypes work.</description></item><item><title>Testing Hiera Data</title><link>/blog/2016-01-16-testing-hiera-data/</link><pubDate>Sat, 16 Jan 2016 18:49:38 -0800</pubDate><guid>/blog/2016-01-16-testing-hiera-data/</guid><description>As a puppet consultant I often run into the same problems with multiple clients. Many times I can reuse a magical script and my value instantly becomes obvious. I like to think I have things figured out, but sometimes there are just problems we as a community have not solved yet.
The problem I am talking about is hiera validation. Most of us are too busy learning puppet, ruby, markdown, and git that testing is not a priority until your puppet code blows up in your face.</description></item><item><title>How to build a module schema</title><link>/blog/2016-01-15-how-to-build-a-module-schema/</link><pubDate>Fri, 15 Jan 2016 18:16:16 -0800</pubDate><guid>/blog/2016-01-15-how-to-build-a-module-schema/</guid><description>As a long time puppet module developer and puppet consultant I have noticed some trends over the years. Puppet modules are becoming increasingly sophisticated and complex. When consuming forge modules I often spend time figuring out how it works and what the developer requires for parameters. Especially when it comes to inserting data into hiera.
Schemas help validate the user is doing what the developer intended.
Creating a schema might not seem necessary but anybody using your module will greatly appreciate it.</description></item><item><title>Leveraging Docker for Puppet Development</title><link>/blog/2015-05-28-leveraging-docker-for-puppet-development/</link><pubDate>Thu, 28 May 2015 20:16:05 -0700</pubDate><guid>/blog/2015-05-28-leveraging-docker-for-puppet-development/</guid><description>Last week I decided to format my macbook pro after several years of gem and vagrant clutter. My computer was suffering from lag, wasted space, spinning beach balls, and weird crashes. So after I backed up and formatted, I decided I was going to do things differently from now on because starting from scratch is such a pain. Since I had some free time on hand I thought I could take a chance to explore docker as a development environment.</description></item><item><title>Testing Your infallibility - Part 1</title><link>/blog/2015-04-14-testing-your-infallibility-part-1/</link><pubDate>Tue, 14 Apr 2015 11:45:54 -0700</pubDate><guid>/blog/2015-04-14-testing-your-infallibility-part-1/</guid><description>Audience: System Admin, Self taught coder, Computer Scientist
Summary: How to leverage puppet-retrospec to generate your puppet unit test suite
How many of you remember when the spell checker first came out? It had such a huge impact in everyones life because instantly everyone who used the spell checker appeared as if they had won the international spelling bee. How long did it take you to switch from looking up every single word in a paper dictionary to simply right clicking on a word?</description></item></channel></rss>