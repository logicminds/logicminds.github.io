<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hiera on Logical thoughts exposed</title><link>/categories/hiera/</link><description>Recent content in hiera on Logical thoughts exposed</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 25 Sep 2018 10:21:49 -0700</lastBuildDate><atom:link href="/categories/hiera/index.xml" rel="self" type="application/rss+xml"/><item><title>Debugging and Inspecting hiera lookups</title><link>/blog/2018-09-25-debugging-and-inspecting-hiera-lookups/</link><pubDate>Tue, 25 Sep 2018 10:21:49 -0700</pubDate><guid>/blog/2018-09-25-debugging-and-inspecting-hiera-lookups/</guid><description>Summary: In this article you will learn how to debug hiera lookups using the traditional methods and more importantly with the puppet-debugger which can cover a multitude of use cases.
Previously, debugging hiera lookups has been limited to the command line and debug logs. If you wanted to debug hiera lookups you had to use the hiera command and pass in the config file along with the scope (variables, facts) you wanted to use.</description></item><item><title>Put some data in your module</title><link>/blog/2017-06-01-put-some-data-in-your-module/</link><pubDate>Thu, 01 Jun 2017 08:31:20 -0700</pubDate><guid>/blog/2017-06-01-put-some-data-in-your-module/</guid><description>Puppet 4.9 cemented the final touches to putting data in puppet modules with the release of hiera 5. Which by the way hiera is now part of Puppet project instead of a separate gem as with previous versions.
So now that that whole params.pp mess is over we can finally move forward and create modules with rich sets of data without resorting to the params.pp hack.
So lets get started. In order to put data in your module you need to have a few things.</description></item></channel></rss>