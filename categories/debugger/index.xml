<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>debugger on Logical thoughts exposed</title><link>/categories/debugger/</link><description>Recent content in debugger on Logical thoughts exposed</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 02 Apr 2019 10:05:51 -0800</lastBuildDate><atom:link href="/categories/debugger/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding Puppet Debugger and other gems when using PDK</title><link>/blog/2019-04-02-adding-puppet-debugger-and-other-gems-when-using-pdk/</link><pubDate>Tue, 02 Apr 2019 10:05:51 -0800</pubDate><guid>/blog/2019-04-02-adding-puppet-debugger-and-other-gems-when-using-pdk/</guid><description>The Puppet Development Kit (PDK) makes it really simple and efficient to work on puppet modules. If you have never used the PDK I would encourage you to try it out especially if you use windows.
The PDK wraps all the annoying tasks so that you don&amp;rsquo;t have to endure the pain of modifying Gemfiles, spec files, folder structure and other puppet related module development tasks.
But with any good wrapper code, what you gain in efficiency you do so at the cost of control and customization.</description></item><item><title>Alternative Facts</title><link>/blog/2018-09-25-alternative-facts/</link><pubDate>Tue, 25 Sep 2018 15:26:41 -0700</pubDate><guid>/blog/2018-09-25-alternative-facts/</guid><description>What does Puppet and alternative facts have in common?
No, this is not some political rant about how real facts matter. This article is about sub-planting alternative puppet facts provided by custom external FacterDB facts.
But first. What the hell are FacterDB facts? FacterDB facts are artisanal hand-made facter sets from real systems stashed into a filesystem based &amp;ldquo;database&amp;rdquo; and searchable via facts. Basically just run puppet facts and save them off into git to get an idea.</description></item><item><title>Debugging and Inspecting hiera lookups</title><link>/blog/2018-09-25-debugging-and-inspecting-hiera-lookups/</link><pubDate>Tue, 25 Sep 2018 10:21:49 -0700</pubDate><guid>/blog/2018-09-25-debugging-and-inspecting-hiera-lookups/</guid><description>Summary: In this article you will learn how to debug hiera lookups using the traditional methods and more importantly with the puppet-debugger which can cover a multitude of use cases.
Previously, debugging hiera lookups has been limited to the command line and debug logs. If you wanted to debug hiera lookups you had to use the hiera command and pass in the config file along with the scope (variables, facts) you wanted to use.</description></item><item><title>Break into your puppet code</title><link>/blog/2017-04-25-break-into-your-puppet-code/</link><pubDate>Tue, 25 Apr 2017 13:15:36 -0700</pubDate><guid>/blog/2017-04-25-break-into-your-puppet-code/</guid><description>The puppet 4 language introduced a slew of new features that gives us enormous amounts of power and flexibility. So much so that puppet code can become complex and often hard to understand at a glance.
A way to combat this complexity is to write unit tests to validate the end state. However, one of the shortcomings of unit testing with rspec-puppet is that you can only test against the end state.</description></item><item><title>Benchmarking Your Puppet Code</title><link>/blog/2017-04-24-benchmarking-your-puppet-code/</link><pubDate>Mon, 24 Apr 2017 18:04:34 -0700</pubDate><guid>/blog/2017-04-24-benchmarking-your-puppet-code/</guid><description>Did you know the puppet debugger can measure how fast your puppet code runs? Starting with release 0.6.1 of the puppet-debugger you can now perform simple benchmarks against your puppet code. So if you ever wondered how fast your puppet code is or that custom puppet function you wrote now there is a way to benchmark those things.
All you need to do is enable benchmark mode, and then use the debugger as you normally do.</description></item><item><title>Testing DataTypes with the Puppet Debugger</title><link>/blog/2017-03-25-testing-datatypes-with-the-puppet-debugger/</link><pubDate>Sat, 25 Mar 2017 10:17:23 -0700</pubDate><guid>/blog/2017-03-25-testing-datatypes-with-the-puppet-debugger/</guid><description>The puppet language comes with a lot of extremely useful syntax and concepts. However, sometimes it is difficult to understand how these work or how to use them. Datatypes are found in almost every programming language so it is no surprise that puppet 4 has a similar feature for validating parameter data. If you have never used a puppet datatype before have a look here first.
The other day I was showing my client the awesome power of puppet datatypes and I was using the puppet-debugger to illustrate how datatypes work.</description></item></channel></rss>